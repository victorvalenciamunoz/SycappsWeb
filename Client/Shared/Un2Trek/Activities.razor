@attribute [Authorize(Roles = "Un2TrekAdministrator")]
@page "/activitylist"

@using SycappsWeb.Client.Services.Un2Trek;
@using SycappsWeb.Shared.Entities.Un2Trek;
@using SycappsWeb.Shared.Models.Un2Trek;

@inject IActividadService activityService;
@inject NavigationManager NavigationManager

<div class="p-3">
    <div class="d-flex flex-row-reverse mb-2 me-2">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="((e) =>ShowActivityDetail(0))">Nueva</button>
    </div>
    @if (activityList.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered table-sm table-sycapps">
                <thead>
                    <tr>
                        <th>
                            Titulo
                        </th>
                        <th>
                            Desde
                        </th>
                        <th>
                            Hasta
                        </th>
                        <th></th>                        
                    </tr>
                </thead>
                <tbody>
                    @foreach (var activity in activityList)
                    {
                        <tr>
                            <td>
                                @activity.Titulo
                            </td>
                            <td>
                                @activity.ValidoDesde
                            </td>
                            <td>
                                @activity.ValidoHasta
                            </td>
                            <td>
                                <button class="btn btn-primary" @onclick="((e) =>ShowActivityDetail(activity.Id))">Detalles</button>
                                <button class="btn btn-success" @onclick="((e) =>ShowActivityTrekis(activity.Id))">Trekis</button>
                            </td>
                            
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-end">
                <li class="page-item">
                    <button type="button" class="page-link" @onclick="GotoPreviousPage" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </button>
                </li>
                @for (int pageIndex = 1; pageIndex <= totalPages; pageIndex++)
                {
                    int index = pageIndex;
                    <li class="page-item">
                        <button type="button" class="page-link" @onclick="() => GotoPage(index)">@index</button>
                    </li>
                }
                <li class="page-item">
                    <button type="button" class="page-link" @onclick="GotoNextPage" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </button>
                </li>
            </ul>
        </nav>
    }
    @if (showDetail && selectedActivity != null)
    {
        <div class="modal" tabindex="-1" style="display:block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Actividad @selectedActivity.Titulo</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="HideDetails"></button>
                    </div>
                    <EditForm Model="@updatedActivity" OnValidSubmit="UpdateActivity">
                        <DataAnnotationsValidator />                        
                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="activity-title" class="col-form-label">Nombre:</label>
                                <InputText @bind-Value="updatedActivity.Titulo" id="activity-title" class="form-control"></InputText>                                
                                <ValidationMessage For="@(()=> updatedActivity.Titulo)"></ValidationMessage>
                            </div>
                            <div class="mb-3">
                                <label for="activity-description" class="col-form-label">Descripción:</label>
                                <InputTextArea @bind-Value="updatedActivity.Descripcion" id="activity-description" rows="4" class="form-control"></InputTextArea>
                                <ValidationMessage For="@(()=> updatedActivity.Descripcion)"></ValidationMessage>
                            </div>
                            <div class="mb-3">
                                <label for="activity-from" class="col-form-label">Válida desde:</label>
                                <InputText @bind-Value="updatedActivity.ValidoDesde" id="activity-from" class="form-control"></InputText>
                                <ValidationMessage For="@(()=> updatedActivity.ValidoDesde)"></ValidationMessage>
                            </div>
                            <div class="mb-3">
                                <label for="activity-to" class="col-form-label">Válida hasta:</label>
                                <InputText @bind-Value="updatedActivity.ValidoHasta" id="activity-to" class="form-control"></InputText>
                                <ValidationMessage For="@(()=> updatedActivity.ValidoHasta)"></ValidationMessage>
                            </div>

                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success">Actualizar</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="HideDetails">Cerrar</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
    
</div>
@code {
    IEnumerable<ActividadResponse> activityList = Enumerable.Empty<ActividadResponse>();
    private bool isBusy = false;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;
    private bool showDetail = false;
    private ActividadResponse selectedActivity;
    private ActividadResponse updatedActivity = null;

    public int totalPages
    {
        get
        {
            if (totalRecords <= pageSize)
                return 1;

            return Convert.ToInt32(Math.Ceiling(Convert.ToDouble(totalRecords) / Convert.ToDouble(pageSize)));
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (isBusy)
            return;

        await LoadAll();
    }

    private async Task GotoPreviousPage()
    {
        if (currentPage == 1) return;

        await GotoPage(currentPage - 1);
    }

    private async Task GotoNextPage()
    {
        if (currentPage == totalPages) return;
        await GotoPage(currentPage + 1);
    }

    private async Task GotoPage(int pageNumber)
    {
        currentPage = pageNumber;
        await LoadAll();
    }

    private async Task LoadAll()
    {
        isBusy = true;
        var result = await activityService.GetAll(currentPage, pageSize);
        if (result != null && result.Data.Any())
        {
            activityList = result.Data;
            totalRecords = result.TotalRecords;
        }
        isBusy = false;
    }

    private void ShowActivityDetail(int id)
    {
        if (isBusy) return;
        if (id != 0)
        {
            selectedActivity = activityList.Where(c => c.Id == id).FirstOrDefault();           
        }
        else
        {
            selectedActivity = new ActividadResponse(0, "Nueva actividad", string.Empty, string.Empty, string.Empty);                        
        }

        if (selectedActivity is not null)
        {
            updatedActivity = new ActividadResponse(selectedActivity.Id,
                                                    selectedActivity.Titulo,
                                                    selectedActivity.ValidoDesde,
                                                    selectedActivity.ValidoHasta,
                                                    selectedActivity.Descripcion);
        }
        showDetail = true;
    }

    private void ShowActivityTrekis(int activityId)
    {
        NavigationManager.NavigateTo($"/trekiList/{activityId}");
    }
    private async void UpdateActivity()
    {
        await activityService.Update(updatedActivity);
        await LoadAll();
    }

    private async Task HideDetails()
    {
        showDetail = false;
    }
}
